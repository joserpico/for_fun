{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a6d114c6",
   "metadata": {
    "papermill": {
     "duration": 0.009511,
     "end_time": "2025-01-02T17:59:58.159287",
     "exception": false,
     "start_time": "2025-01-02T17:59:58.149776",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Loading the Data**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "367a78c6",
   "metadata": {
    "papermill": {
     "duration": 0.008188,
     "end_time": "2025-01-02T17:59:58.176636",
     "exception": false,
     "start_time": "2025-01-02T17:59:58.168448",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The goal of this project is to create a machine learning model that can predict the outcome of Valorant games based on a single player's statistics. Through exploratory data analysis and statistical testing, using panda and numpy libraries, we will discover important features that will help us define the features for our model. Through EDA we will also define our target, or what we want the model to tell us. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cd2fac2f",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-01-02T17:59:58.195181Z",
     "iopub.status.busy": "2025-01-02T17:59:58.194770Z",
     "iopub.status.idle": "2025-01-02T18:00:00.670852Z",
     "shell.execute_reply": "2025-01-02T18:00:00.669305Z"
    },
    "papermill": {
     "duration": 2.487831,
     "end_time": "2025-01-02T18:00:00.673104",
     "exception": false,
     "start_time": "2025-01-02T17:59:58.185273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/my-first-1000-valorant-games/valorant_games.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import scipy.stats as stats\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "442a8a3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:00.693389Z",
     "iopub.status.busy": "2025-01-02T18:00:00.692818Z",
     "iopub.status.idle": "2025-01-02T18:00:00.719173Z",
     "shell.execute_reply": "2025-01-02T18:00:00.718134Z"
    },
    "papermill": {
     "duration": 0.038094,
     "end_time": "2025-01-02T18:00:00.720959",
     "exception": false,
     "start_time": "2025-01-02T18:00:00.682865",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/my-first-1000-valorant-games/valorant_games.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7993293d",
   "metadata": {
    "papermill": {
     "duration": 0.008335,
     "end_time": "2025-01-02T18:00:00.738103",
     "exception": false,
     "start_time": "2025-01-02T18:00:00.729768",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Previewing the Data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c059f90c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:00.758798Z",
     "iopub.status.busy": "2025-01-02T18:00:00.758342Z",
     "iopub.status.idle": "2025-01-02T18:00:00.785213Z",
     "shell.execute_reply": "2025-01-02T18:00:00.784077Z"
    },
    "papermill": {
     "duration": 0.038969,
     "end_time": "2025-01-02T18:00:00.786804",
     "exception": false,
     "start_time": "2025-01-02T18:00:00.747835",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>game_id</th>\n",
       "      <th>episode</th>\n",
       "      <th>act</th>\n",
       "      <th>rank</th>\n",
       "      <th>date</th>\n",
       "      <th>agent</th>\n",
       "      <th>map</th>\n",
       "      <th>outcome</th>\n",
       "      <th>round_wins</th>\n",
       "      <th>round_losses</th>\n",
       "      <th>kills</th>\n",
       "      <th>deaths</th>\n",
       "      <th>assists</th>\n",
       "      <th>kdr</th>\n",
       "      <th>avg_dmg_delta</th>\n",
       "      <th>headshot_pct</th>\n",
       "      <th>avg_dmg</th>\n",
       "      <th>acs</th>\n",
       "      <th>num_frag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>Placement</td>\n",
       "      <td>4/11/2023</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Ascent</td>\n",
       "      <td>Loss</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>8</td>\n",
       "      <td>15</td>\n",
       "      <td>4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>-61</td>\n",
       "      <td>3</td>\n",
       "      <td>76</td>\n",
       "      <td>125</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>Placement</td>\n",
       "      <td>4/12/2023</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Icebox</td>\n",
       "      <td>Loss</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>0.2</td>\n",
       "      <td>-124</td>\n",
       "      <td>22</td>\n",
       "      <td>42</td>\n",
       "      <td>59</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>Placement</td>\n",
       "      <td>4/15/2023</td>\n",
       "      <td>KAY/O</td>\n",
       "      <td>Lotus</td>\n",
       "      <td>Win</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>0.6</td>\n",
       "      <td>-46</td>\n",
       "      <td>2</td>\n",
       "      <td>87</td>\n",
       "      <td>132</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>Placement</td>\n",
       "      <td>4/15/2023</td>\n",
       "      <td>Brimstone</td>\n",
       "      <td>Ascent</td>\n",
       "      <td>Loss</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>18</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>1.5</td>\n",
       "      <td>23</td>\n",
       "      <td>14</td>\n",
       "      <td>137</td>\n",
       "      <td>230</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>Placement</td>\n",
       "      <td>4/15/2023</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Haven</td>\n",
       "      <td>Loss</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>0.4</td>\n",
       "      <td>-75</td>\n",
       "      <td>7</td>\n",
       "      <td>90</td>\n",
       "      <td>146</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   game_id  episode  act       rank       date      agent     map outcome  \\\n",
       "0        1        6    2  Placement  4/11/2023     Cypher  Ascent    Loss   \n",
       "1        2        6    2  Placement  4/12/2023     Cypher  Icebox    Loss   \n",
       "2        3        6    2  Placement  4/15/2023      KAY/O   Lotus     Win   \n",
       "3        4        6    2  Placement  4/15/2023  Brimstone  Ascent    Loss   \n",
       "4        5        6    2  Placement  4/15/2023     Cypher   Haven    Loss   \n",
       "\n",
       "   round_wins  round_losses  kills  deaths  assists  kdr  avg_dmg_delta  \\\n",
       "0           5            13      8      15        4  0.5            -61   \n",
       "1           4            13      3      15        2  0.2           -124   \n",
       "2          13             4      7      12        7  0.6            -46   \n",
       "3           9            13     18      12       10  1.5             23   \n",
       "4           1            13      6      14        3  0.4            -75   \n",
       "\n",
       "   headshot_pct  avg_dmg  acs  num_frag  \n",
       "0             3       76  125         3  \n",
       "1            22       42   59         5  \n",
       "2             2       87  132         5  \n",
       "3            14      137  230         2  \n",
       "4             7       90  146         4  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0641e62e",
   "metadata": {
    "papermill": {
     "duration": 0.009392,
     "end_time": "2025-01-02T18:00:00.805448",
     "exception": false,
     "start_time": "2025-01-02T18:00:00.796056",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Handling Missing and Duplicate Values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0c716ed2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:00.825031Z",
     "iopub.status.busy": "2025-01-02T18:00:00.824640Z",
     "iopub.status.idle": "2025-01-02T18:00:00.851291Z",
     "shell.execute_reply": "2025-01-02T18:00:00.849787Z"
    },
    "papermill": {
     "duration": 0.038753,
     "end_time": "2025-01-02T18:00:00.853250",
     "exception": false,
     "start_time": "2025-01-02T18:00:00.814497",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>game_id</th>\n",
       "      <th>episode</th>\n",
       "      <th>act</th>\n",
       "      <th>rank</th>\n",
       "      <th>date</th>\n",
       "      <th>agent</th>\n",
       "      <th>map</th>\n",
       "      <th>outcome</th>\n",
       "      <th>round_wins</th>\n",
       "      <th>round_losses</th>\n",
       "      <th>kills</th>\n",
       "      <th>deaths</th>\n",
       "      <th>assists</th>\n",
       "      <th>kdr</th>\n",
       "      <th>avg_dmg_delta</th>\n",
       "      <th>headshot_pct</th>\n",
       "      <th>avg_dmg</th>\n",
       "      <th>acs</th>\n",
       "      <th>num_frag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [game_id, episode, act, rank, date, agent, map, outcome, round_wins, round_losses, kills, deaths, assists, kdr, avg_dmg_delta, headshot_pct, avg_dmg, acs, num_frag]\n",
       "Index: []"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4d96dbc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:00.873166Z",
     "iopub.status.busy": "2025-01-02T18:00:00.872763Z",
     "iopub.status.idle": "2025-01-02T18:00:00.891231Z",
     "shell.execute_reply": "2025-01-02T18:00:00.889892Z"
    },
    "papermill": {
     "duration": 0.030521,
     "end_time": "2025-01-02T18:00:00.893146",
     "exception": false,
     "start_time": "2025-01-02T18:00:00.862625",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "game_id          0.0\n",
       "episode          0.0\n",
       "act              0.0\n",
       "rank               0\n",
       "date               0\n",
       "agent              0\n",
       "map                0\n",
       "outcome            0\n",
       "round_wins       0.0\n",
       "round_losses     0.0\n",
       "kills            0.0\n",
       "deaths           0.0\n",
       "assists          0.0\n",
       "kdr              0.0\n",
       "avg_dmg_delta    0.0\n",
       "headshot_pct     0.0\n",
       "avg_dmg          0.0\n",
       "acs              0.0\n",
       "num_frag         0.0\n",
       "dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.isna()].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd89b677",
   "metadata": {
    "papermill": {
     "duration": 0.008815,
     "end_time": "2025-01-02T18:00:00.911512",
     "exception": false,
     "start_time": "2025-01-02T18:00:00.902697",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Exploratory Data Analysis** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "141a0ee8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:00.931756Z",
     "iopub.status.busy": "2025-01-02T18:00:00.931381Z",
     "iopub.status.idle": "2025-01-02T18:00:01.233101Z",
     "shell.execute_reply": "2025-01-02T18:00:01.231455Z"
    },
    "papermill": {
     "duration": 0.31463,
     "end_time": "2025-01-02T18:00:01.235313",
     "exception": false,
     "start_time": "2025-01-02T18:00:00.920683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "wins_df = df[df['outcome'] == 'Win']\n",
    "win_counts = wins_df['map'].value_counts()\n",
    "\n",
    "plt.figure(figsize=(8, 8))\n",
    "plt.pie(win_counts, labels=win_counts.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('Set3', len(win_counts)))\n",
    "plt.title('Distribution of Wins Across Maps')\n",
    "plt.axis('equal')  # Equal aspect ratio ensures that pie chart is circular.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0755be1",
   "metadata": {
    "papermill": {
     "duration": 0.010477,
     "end_time": "2025-01-02T18:00:01.256940",
     "exception": false,
     "start_time": "2025-01-02T18:00:01.246463",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The user tends to win the most on Ascent, with Lotus coming in a close second."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "91bd7313",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:01.281738Z",
     "iopub.status.busy": "2025-01-02T18:00:01.281393Z",
     "iopub.status.idle": "2025-01-02T18:00:01.539448Z",
     "shell.execute_reply": "2025-01-02T18:00:01.537833Z"
    },
    "papermill": {
     "duration": 0.273076,
     "end_time": "2025-01-02T18:00:01.542269",
     "exception": false,
     "start_time": "2025-01-02T18:00:01.269193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "wins_df = df[df['outcome'] == 'Win']\n",
    "win_counts_by_agent = wins_df['agent'].value_counts()\n",
    "plt.figure(figsize=(8, 8))\n",
    "sns.barplot(x=win_counts_by_agent.index, y=win_counts_by_agent.values, palette='Set3')\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Agent')\n",
    "plt.ylabel('Number of Wins')\n",
    "plt.title('Number of Wins for Each Agent')  # Equal aspect ratio ensures that pie chart is circular.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d8fc55f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:01.567390Z",
     "iopub.status.busy": "2025-01-02T18:00:01.566968Z",
     "iopub.status.idle": "2025-01-02T18:00:01.574740Z",
     "shell.execute_reply": "2025-01-02T18:00:01.573290Z"
    },
    "papermill": {
     "duration": 0.02264,
     "end_time": "2025-01-02T18:00:01.576832",
     "exception": false,
     "start_time": "2025-01-02T18:00:01.554192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "player's average headshot percentage is: 22.763 %\n",
      "player's average damage per game is: 134.446\n"
     ]
    }
   ],
   "source": [
    "#finding the average headshot and damage per game\n",
    "headshot_avg = df['headshot_pct'].mean()\n",
    "dmg_avg = df['avg_dmg'].mean()\n",
    "\n",
    "print(f\"player's average headshot percentage is:\" , headshot_avg ,'%')\n",
    "print(f\"player's average damage per game is:\" , dmg_avg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0e841033",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:01.602609Z",
     "iopub.status.busy": "2025-01-02T18:00:01.602251Z",
     "iopub.status.idle": "2025-01-02T18:00:01.620199Z",
     "shell.execute_reply": "2025-01-02T18:00:01.619030Z"
    },
    "papermill": {
     "duration": 0.033278,
     "end_time": "2025-01-02T18:00:01.622052",
     "exception": false,
     "start_time": "2025-01-02T18:00:01.588774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>game_id</th>\n",
       "      <th>date</th>\n",
       "      <th>agent</th>\n",
       "      <th>map</th>\n",
       "      <th>avg_dmg</th>\n",
       "      <th>headshot_pct</th>\n",
       "      <th>kdr</th>\n",
       "      <th>kills</th>\n",
       "      <th>deaths</th>\n",
       "      <th>outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>435</th>\n",
       "      <td>436</td>\n",
       "      <td>11/2/2023</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Sunset</td>\n",
       "      <td>373</td>\n",
       "      <td>22</td>\n",
       "      <td>9.7</td>\n",
       "      <td>29</td>\n",
       "      <td>3</td>\n",
       "      <td>Win</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>50</td>\n",
       "      <td>5/4/2023</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Lotus</td>\n",
       "      <td>284</td>\n",
       "      <td>10</td>\n",
       "      <td>4.5</td>\n",
       "      <td>27</td>\n",
       "      <td>6</td>\n",
       "      <td>Win</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>422</th>\n",
       "      <td>423</td>\n",
       "      <td>10/5/2023</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Breeze</td>\n",
       "      <td>266</td>\n",
       "      <td>25</td>\n",
       "      <td>2.8</td>\n",
       "      <td>31</td>\n",
       "      <td>11</td>\n",
       "      <td>Win</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>684</th>\n",
       "      <td>685</td>\n",
       "      <td>6/2/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Breeze</td>\n",
       "      <td>251</td>\n",
       "      <td>63</td>\n",
       "      <td>3.3</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>Win</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>714</th>\n",
       "      <td>715</td>\n",
       "      <td>6/13/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Sunset</td>\n",
       "      <td>240</td>\n",
       "      <td>23</td>\n",
       "      <td>3.1</td>\n",
       "      <td>22</td>\n",
       "      <td>7</td>\n",
       "      <td>Win</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     game_id       date   agent     map  avg_dmg  headshot_pct  kdr  kills  \\\n",
       "435      436  11/2/2023  Cypher  Sunset      373            22  9.7     29   \n",
       "49        50   5/4/2023  Cypher   Lotus      284            10  4.5     27   \n",
       "422      423  10/5/2023  Cypher  Breeze      266            25  2.8     31   \n",
       "684      685   6/2/2024  Cypher  Breeze      251            63  3.3     10   \n",
       "714      715  6/13/2024  Cypher  Sunset      240            23  3.1     22   \n",
       "\n",
       "     deaths outcome  \n",
       "435       3     Win  \n",
       "49        6     Win  \n",
       "422      11     Win  \n",
       "684       3     Win  \n",
       "714       7     Win  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#finding users top five best games based off of damage\n",
    "def top_five_games_by_dmg():\n",
    "    top_5_games = df.sort_values(by = 'avg_dmg' , ascending = False).head()\n",
    "    return top_5_games[['game_id' , 'date' , 'agent' , 'map' , 'avg_dmg' , 'headshot_pct', 'kdr', 'kills' , 'deaths', 'outcome']]\n",
    "\n",
    "top_five_games_by_dmg()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2089a0fd",
   "metadata": {
    "papermill": {
     "duration": 0.011077,
     "end_time": "2025-01-02T18:00:01.644793",
     "exception": false,
     "start_time": "2025-01-02T18:00:01.633716",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The player's best game was game number 435 where he produced 373 damage, had a KDR of 9.7 and had 29 kills and three deaths."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "644249a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:01.669741Z",
     "iopub.status.busy": "2025-01-02T18:00:01.669357Z",
     "iopub.status.idle": "2025-01-02T18:00:01.869450Z",
     "shell.execute_reply": "2025-01-02T18:00:01.868240Z"
    },
    "papermill": {
     "duration": 0.21482,
     "end_time": "2025-01-02T18:00:01.871363",
     "exception": false,
     "start_time": "2025-01-02T18:00:01.656543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#does a better headshot percentage result in more winning games?\n",
    "# Convert 'outcome' to a binary format (1 for Win, 0 for Loss)\n",
    "df['outcome_binary'] = df['outcome'].map({'Win': 1, 'Loss': 0})\n",
    "\n",
    "# ploting the relationship between headshot percentage and game outcome\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.boxplot(data=df, x='outcome', y='headshot_pct')\n",
    "\n",
    "# adding labels and title\n",
    "plt.xticks([0, 1], ['Loss', 'Win'])\n",
    "plt.xlabel('Game Outcome')\n",
    "plt.ylabel('Headshot Percentage')\n",
    "plt.title('Headshot Percentage vs. Game Outcome')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "746e3cab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:01.898186Z",
     "iopub.status.busy": "2025-01-02T18:00:01.897710Z",
     "iopub.status.idle": "2025-01-02T18:00:01.906575Z",
     "shell.execute_reply": "2025-01-02T18:00:01.905138Z"
    },
    "papermill": {
     "duration": 0.02406,
     "end_time": "2025-01-02T18:00:01.908585",
     "exception": false,
     "start_time": "2025-01-02T18:00:01.884525",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation between headshot percentage and outcome: -0.01\n"
     ]
    }
   ],
   "source": [
    "#does landing headshots lead to winning more games?\n",
    "# finding the correlation coefficient\n",
    "correlation = df['headshot_pct'].corr(df['outcome_binary'])\n",
    "print(f\"Correlation between headshot percentage and outcome: {correlation:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35d54a85",
   "metadata": {
    "papermill": {
     "duration": 0.011954,
     "end_time": "2025-01-02T18:00:01.933110",
     "exception": false,
     "start_time": "2025-01-02T18:00:01.921156",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "since the correlation is -0.01 , it would suggest that there is little to no correlation between headshots and win rate. Furthermore the graph shows that the median win rate is similar from headshot rate. Meaning that since the headshot medians are similar whether the user wins, loses, or draws (green) there is no correlation between winning more by improving your aim. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d82747c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:01.959424Z",
     "iopub.status.busy": "2025-01-02T18:00:01.959021Z",
     "iopub.status.idle": "2025-01-02T18:00:01.969794Z",
     "shell.execute_reply": "2025-01-02T18:00:01.968319Z"
    },
    "papermill": {
     "duration": 0.026173,
     "end_time": "2025-01-02T18:00:01.971634",
     "exception": false,
     "start_time": "2025-01-02T18:00:01.945461",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     game_id       rank outcome      agent\n",
      "3          4  Placement    Loss  Brimstone\n",
      "5          6   Silver 2     Win      KAY/O\n",
      "9         10   Silver 2     Win    Phoenix\n",
      "14        15   Silver 2    Loss      KAY/O\n",
      "22        23   Silver 3     Win     Cypher\n",
      "..       ...        ...     ...        ...\n",
      "983      984  Diamond 3    Loss     Cypher\n",
      "990      991  Diamond 2    Loss     Cypher\n",
      "995      996  Diamond 2     Win      Astra\n",
      "996      997  Diamond 2    Loss       Omen\n",
      "998      999  Diamond 2     Win       Omen\n",
      "\n",
      "[528 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "#how many instances did the player not feed (have a KDR >= 1)?\n",
    "#filtering for KDR where KDR > 1\n",
    "kdr_above_1_df = df[df['kdr'] > 1]\n",
    "print(kdr_above_1_df[['game_id', 'rank' , 'outcome' , 'agent']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3c108778",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:01.997797Z",
     "iopub.status.busy": "2025-01-02T18:00:01.997388Z",
     "iopub.status.idle": "2025-01-02T18:00:02.006672Z",
     "shell.execute_reply": "2025-01-02T18:00:02.005464Z"
    },
    "papermill": {
     "duration": 0.024428,
     "end_time": "2025-01-02T18:00:02.008607",
     "exception": false,
     "start_time": "2025-01-02T18:00:01.984179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The user had 528 games where his KDR was above 1.\n",
      "the player's best KDR was: 9.7\n"
     ]
    }
   ],
   "source": [
    "#finding the number of times KDR was above 1 by filtering\n",
    "games_above_1_kdr = df[df['kdr'] > 1]\n",
    "#printing the length of the list\n",
    "num_games_above_1_kdr = len(games_above_1_kdr)\n",
    "print(f\"The user had {num_games_above_1_kdr} games where his KDR was above 1.\")\n",
    "\n",
    "#indexing for finding the best KDR\n",
    "best_kdr_row = kdr_above_1_df.loc[kdr_above_1_df['kdr'].idxmax()]\n",
    "print(f\"the player's best KDR was:\" , best_kdr_row['kdr'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "185527b8",
   "metadata": {
    "papermill": {
     "duration": 0.012134,
     "end_time": "2025-01-02T18:00:02.033401",
     "exception": false,
     "start_time": "2025-01-02T18:00:02.021267",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "528 games where the users KDR was above 1, meaning he got more kills than deaths. His best game (indicated by KDR) was with Cypher on the Sunset map where he went 29-3-7 with a KDR of 9.7 in Diamond 1. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ff0dbd1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:02.061635Z",
     "iopub.status.busy": "2025-01-02T18:00:02.061232Z",
     "iopub.status.idle": "2025-01-02T18:00:02.071467Z",
     "shell.execute_reply": "2025-01-02T18:00:02.070128Z"
    },
    "papermill": {
     "duration": 0.026108,
     "end_time": "2025-01-02T18:00:02.073605",
     "exception": false,
     "start_time": "2025-01-02T18:00:02.047497",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The lowest rank is: Silver 2\n",
      "The highest rank is: Ascendant 2\n"
     ]
    }
   ],
   "source": [
    "#what is the players highest and lowest rank (outside of Placements)?\n",
    "#create a numeric list to rank ranks\n",
    "rank_order = {\n",
    "    'Bronze 1': 1, 'Bronze 2': 2, 'Bronze 3': 3,\n",
    "    'Silver 1': 4, 'Silver 2': 5, 'Silver 3': 6,\n",
    "    'Gold 1': 7, 'Gold 2': 8, 'Gold 3': 9,\n",
    "    'Platinum 1': 10, 'Platinum 2': 11, 'Platinum 3': 12,\n",
    "    'Diamond 1': 13, 'Diamond 2': 14, 'Diamond 3': 15,\n",
    "    'Ascendant 1': 16, 'Ascendant 2': 17, 'Ascendant 3': 18\n",
    "}\n",
    "\n",
    "# numerically ranking them\n",
    "df['rank_numeric'] = df['rank'].map(rank_order)\n",
    "\n",
    "# finding the lowest and highest rank based on the numeric scale\n",
    "lowest_rank = df.loc[df['rank_numeric'].idxmin()]['rank']\n",
    "highest_rank = df.loc[df['rank_numeric'].idxmax()]['rank']\n",
    "\n",
    "#print the results\n",
    "print(f\"The lowest rank is: {lowest_rank}\")\n",
    "print(f\"The highest rank is: {highest_rank}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "eb139e11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:02.100410Z",
     "iopub.status.busy": "2025-01-02T18:00:02.100010Z",
     "iopub.status.idle": "2025-01-02T18:00:02.500587Z",
     "shell.execute_reply": "2025-01-02T18:00:02.499050Z"
    },
    "papermill": {
     "duration": 0.416259,
     "end_time": "2025-01-02T18:00:02.502704",
     "exception": false,
     "start_time": "2025-01-02T18:00:02.086445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#is there a difference in damage output from rank to rank?\n",
    "#filtering and creating new datasets for players highest and lowest ranks\n",
    "ascendant_data = df[df['rank'].isin(['Ascendant 1', 'Ascendant 2', 'Ascendant 3' , ''])]\n",
    "silver_data = df[df['rank'].isin(['Silver 1' , 'Silver 2' , 'SIlver 3' , ''])]\n",
    "\n",
    "#plotting average damage dealt\n",
    "plt.figure(figsize = (10,6))\n",
    "plt.hist(ascendant_data['avg_dmg'] , bins = 20 , alpha = 0.5, color = 'pink', edgecolor= 'black')\n",
    "plt.hist(silver_data['avg_dmg'] , bins = 20 , alpha = 0.5, color = 'purple' , edgecolor = 'black')\n",
    "plt.title('Average Damage in Ascendant and Silver Ranks')\n",
    "plt.xlabel('avg_dmg')\n",
    "plt.ylabel('Frequency')\n",
    "plt.legend()\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b33854a3",
   "metadata": {
    "papermill": {
     "duration": 0.012921,
     "end_time": "2025-01-02T18:00:02.530175",
     "exception": false,
     "start_time": "2025-01-02T18:00:02.517254",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "While the frequency of Ascendant games is higher in the data, the amount of damage produced in a single game is higher in Ascendant than in Silver. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "72310cdf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:02.558741Z",
     "iopub.status.busy": "2025-01-02T18:00:02.558206Z",
     "iopub.status.idle": "2025-01-02T18:00:02.829853Z",
     "shell.execute_reply": "2025-01-02T18:00:02.828808Z"
    },
    "papermill": {
     "duration": 0.288555,
     "end_time": "2025-01-02T18:00:02.831791",
     "exception": false,
     "start_time": "2025-01-02T18:00:02.543236",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Most Played Agents in Ascendant Rank:\n",
      "agent\n",
      "Cypher     157\n",
      "Killjoy     62\n",
      "Viper       13\n",
      "Vyse         3\n",
      "Omen         1\n",
      "Name: count, dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='agent'>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#what agents does the player use in their highest rank?\n",
    "#counting the instances of agent use\n",
    "agent_counts = ascendant_data['agent'].value_counts()\n",
    "\n",
    "#print the results\n",
    "print(\"Most Played Agents in Ascendant Rank:\")\n",
    "print(agent_counts)\n",
    "\n",
    "# plotting the results using a bar plot\n",
    "plt.figure(figsize=(12, 6))\n",
    "agent_counts.plot(kind='bar', color='skyblue', edgecolor='black')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9be630e",
   "metadata": {
    "papermill": {
     "duration": 0.014045,
     "end_time": "2025-01-02T18:00:02.860226",
     "exception": false,
     "start_time": "2025-01-02T18:00:02.846181",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The player has used Cypher the most in his Ascendant games"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0be7c533",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:02.890084Z",
     "iopub.status.busy": "2025-01-02T18:00:02.889622Z",
     "iopub.status.idle": "2025-01-02T18:00:03.140051Z",
     "shell.execute_reply": "2025-01-02T18:00:03.138930Z"
    },
    "papermill": {
     "duration": 0.268239,
     "end_time": "2025-01-02T18:00:03.142311",
     "exception": false,
     "start_time": "2025-01-02T18:00:02.874072",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Most Played Agents in silver Rank:\n",
      "agent\n",
      "KAY/O        7\n",
      "Cypher       5\n",
      "Breach       3\n",
      "Phoenix      1\n",
      "Brimstone    1\n",
      "Name: count, dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='agent'>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA8gAAAJGCAYAAACHn6weAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA1zElEQVR4nO3de5jVBYH/8c8gNFwclJtc4qqiQkKCpqm5oasiEooVmZc0IssCTMhN6aKgCbqZkuVqgqKZhGl5a12wQLRU+uEFxA3l4gVYFRpRkEuTDPP7w3XWEW8DM3NgeL2eZ57Hc853PB93T9mb8z3fU1RRUVERAAAA2Mk1KPQAAAAA2B4IZAAAAIhABgAAgCQCGQAAAJIIZAAAAEgikAEAACCJQAYAAIAkAhkAAACSJA3r+gk3b96cl156KSUlJSkqKqrrpwcAAGAnU1FRkTfeeCMdOnRIgwbv/z5xnQfySy+9lE6dOtX10wIAALCTW758eTp27Pi+j9d5IJeUlCR5a1jz5s3r+ukBAADYyaxduzadOnWq7NH3U+eB/PZp1c2bNxfIAAAA1JkP+5ivi3QBAABABDIAAAAkEcgAAACQRCADAABAEoEMAAAASQQyAAAAJBHIAAAAkEQgAwAAQBKBDAAAAEkEMgAAACQRyAAAAJBEIAMAAEASgQwAAABJBDIAAAAkqWYgd+3aNUVFRVv8DB8+vLb2AQAAQJ1oWJ2D586dm/Ly8srbTz/9dI455pgMGTKkxocBAABAXapWILdp06bK7csuuyx77bVXPvvZz9boKAAAAKhrW/0Z5H/+85/59a9/na997WspKiqqyU0AAABQ56r1DvI73XXXXXn99dfz1a9+9QOPKysrS1lZWeXttWvXbu1TFtyyZctSWlpa6Bk7ldatW6dz586FngEAAOwEtjqQb7jhhgwYMCAdOnT4wOMmTJiQcePGbe3TbDeWLVuWHj16ZMOGDYWeslNp2rRpFi5cKJIBAIBat1WB/OKLL+ZPf/pTfv/733/osWPGjMno0aMrb69duzadOnXamqctqNLS0mzYsCG//sHF6dGlW6Hn7BQWvvh8Tr/0wpSWlgpkAACg1m1VIE+ZMiV77LFHBg4c+KHHFhcXp7i4eGueZrvUo0u39N1nv0LPAAAAoIZV+yJdmzdvzpQpU3LmmWemYcOtPkMbAAAAtivVDuQ//elPWbZsWb72ta/Vxh4AAAAoiGq/BXzsscemoqKiNrYAAABAwWz19yADAABAfSKQAQAAIAIZAAAAkghkAAAASCKQAQAAIIlABgAAgCQCGQAAAJIIZAAAAEgikAEAACCJQAYAAIAkAhkAAACSCGQAAABIIpABAAAgiUAGAACAJAIZAAAAkghkAAAASCKQAQAAIIlABgAAgCQCGQAAAJIIZAAAAEgikAEAACCJQAYAAIAkAhkAAACSCGQAAABIIpABAAAgiUAGAACAJAIZAAAAkghkAAAASCKQAQAAIIlABgAAgCQCGQAAAJIIZAAAAEgikAEAACCJQAYAAIAkAhkAAACSCGQAAABIIpABAAAgiUAGAACAJAIZAAAAkghkAAAASCKQAQAAIIlABgAAgCQCGQAAAJIIZAAAAEgikAEAACCJQAYAAIAkAhkAAACSCGQAAABIIpABAAAgiUAGAACAJAIZAAAAkghkAAAASLIVgfw///M/Of3009OqVas0adIkvXr1ymOPPVYb2wAAAKDONKzOwa+99loOP/zwHHnkkfmv//qvtGnTJosXL06LFi1qax8AAADUiWoF8uWXX55OnTplypQplfd169atxkcBAABAXavWKdb33HNPDjrooAwZMiR77LFH+vTpk0mTJn3g75SVlWXt2rVVfgAAAGB7U61Afu6553Lttdeme/fumTFjRr71rW/lnHPOyc033/y+vzNhwoTstttulT+dOnXa5tEAAABQ06oVyJs3b07fvn0zfvz49OnTJ9/4xjdy1lln5brrrnvf3xkzZkzWrFlT+bN8+fJtHg0AAAA1rVqB3L59+/Ts2bPKfT169MiyZcve93eKi4vTvHnzKj8AAACwvalWIB9++OF59tlnq9y3aNGidOnSpUZHAQAAQF2rViCPGjUqc+bMyfjx47NkyZJMnTo1119/fYYPH15b+wAAAKBOVCuQP/WpT+XOO+/Mb37zm+y///655JJLMnHixJx22mm1tQ8AAADqRLW+BzlJPve5z+Vzn/tcbWwBAACAgqnWO8gAAABQXwlkAAAAiEAGAACAJAIZAAAAkghkAAAASCKQAQAAIIlABgAAgCQCGQAAAJIIZAAAAEgikAEAACCJQAYAAIAkAhkAAACSCGQAAABIIpABAAAgiUAGAACAJAIZAAAAkghkAAAASCKQAQAAIIlABgAAgCQC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DOyA3nzzzey1115ZuHBhoacAAFCPbNX3ILNjeP3117NkyZIkyd57753dd9+9sIOghjRq1Cj/+Mc/Cj0D6szixYvzwAMPZNWqVdm8eXOVxy688MICrYKa8/e//z1t2rR5z8cWLFiQXr161fEiqB2bNm3K7Nmzs3Tp0px66qkpKSnJSy+9lObNm2fXXXct9Dzie5DrpRdeeCHDhw/PjBkz8vb/e4uKinLcccflF7/4Rbp27VrYgVADxo8fn0WLFmXy5Mlp2NCf9VF/TZo0Kd/61rfSunXrtGvXLkVFRZWPFRUV5YknnijgOqgZ7dq1yw033JCBAwdWuf+KK67Ij370o2zcuLFAy6DmvPjiiznuuOOybNmylJWVZdGiRdlzzz3zne98J2VlZbnuuusKPZF4B7neWb58eT796U+nUaNGueSSS9KjR48kyd/+9rdce+21OfTQQzN37tx07NixwEth28ydOzczZ87M/fffn169eqVZs2ZVHv/9739foGVQs3784x/n0ksvzfnnn1/oKVBrRo8enS984QsZOnRorrzyyqxevTpnnHFGFixYkKlTpxZ6HtSI73znOznooIMyf/78tGrVqvL+k046KWeddVYBl/FO3kGuZ4YNG5YlS5ZkxowZady4cZXHNm7cmOOOOy7du3fP5MmTC7QQasbQoUM/8PEpU6bU0RKoXc2bN8+8efOy5557FnoK1Konn3wyX/nKV1JWVpbVq1fnkEMOyY033ph27doVehrUiFatWuWRRx7Jvvvum5KSksyfPz977rlnXnjhhfTs2TMbNmwo9ETiHeR6Z/r06bntttu2iOMkadKkSS655JJ8+ctfLsAyqFkCmJ3FkCFDcv/99+fss88u9BSoVXvvvXf233///O53v0uSnHzyyeKYemXz5s0pLy/f4v4VK1akpKSkAIt4LwK5niktLf3AzxjvueeeWb16dd0NglrkQhfUV1dffXXlX++999750Y9+lDlz5qRXr15p1KhRlWPPOeecup4HNe7hhx/O6aefnpYtW+app57Kww8/nJEjR+a+++7LddddlxYtWhR6ImyzY489NhMnTsz111+f5K3rSKxbty4XXXRRjj/++AKv421Osa5nunbtmuuvvz7HHnvsez4+ffr0nH322XnhhRfqdhjUMBe6oD7r1q3bRzquqKgozz33XC2vgdpXXFycUaNG5ZJLLqn8Q6ClS5fm9NNPz/Lly7NixYoCL4Rtt2LFivTv3z8VFRVZvHhxDjrooCxevDitW7fOQw89lD322KPQE4lArnfOPffczJo1KzNnztzi6xJWrVqVY445JkceeWQmTpxYmIFQQwYPHpySkpLccMMNadWqVeXneGbPnp2zzjorixcvLvREAD6iBx98MJ/97Ge3uH/z5s259NJL86Mf/agAq6Dmbdq0KdOmTctTTz2VdevWpW/fvjnttNPSpEmTQk/jfwnkeua1117LIYcckldeeSWnn3569ttvv1RUVGThwoWZOnVq2rVrlzlz5qRly5aFngrbxIUuAACoaT6DXM+0aNEif/3rX/P9738/06ZNy+uvv54k2X333XPqqadm/Pjx4ph6wYUu2Fl84QtfyMEHH7zF1zz9+7//e+bOnZvbb7+9QMtg21x99dX5xje+kcaNG1f53P27FRUVZeTIkXW4DGrP4sWL88ADD2TVqlXZvHlzlccuvPDCAq3inbyDXM9s2LAhTZs2TZJUVFTk73//e5KkTZs2KSoqKuQ0qFEnn3xydtttt1x//fUpKSnJU089lTZt2uTEE09M586dXeWaeqNNmzaZNWtWevXqVeX+BQsW5Oijj87KlSsLtAy2Tbdu3fLYY4+lVatWH/i5e5+1p76YNGlSvvWtb6V169Zp165dlf9tXlRUlCeeeKKA63ibQK5nmjZtmqOOOionnHBCTjzxxLRt27bQk6BWuNAFO4smTZpk3rx52Xfffavc/8wzz6RPnz7ZuHFjgZYBUB1dunTJt7/97S3OCGL70qDQA6hZzzzzTPr375/f/va36dKlSw455JBceumlWbBgQaGnQY3q2LFj5s+fn+9///sZNWpU+vTpk8suuyxPPvmkOKZe6dWrV2677bYt7p82bVp69uxZgEUAbI3XXnstQ4YMKfQMPoR3kOuxNWvW5L777svdd9+d6dOnp2XLljnhhBNywgkn5LOf/Wx22WWXQk8E4EPce++9+fznP59TTz01Rx11VJJk5syZ+c1vfpPbb789gwcPLuxAqAHl5eW56aabMnPmzPf8bOasWbMKtAxqzrBhw/KpT30qZ599dqGn8AEE8k7izTffzOzZs3PPPffknnvuyRtvvJGf//znOe200wo9DbaaC12ws/jP//zPjB8/PvPmzUuTJk3Su3fvXHTRRe/5tTiwIxoxYkRuuummDBw4MO3bt9/iuilXXXVVgZZBzZkwYUKuvPLKDBw4ML169ar8zu+3nXPOOQVaxjsJ5Hpm3rx5OeCAAz70uCeffDKbNm3Kpz71qdofBbXAhS4A6o/WrVvnV7/6VY4//vhCT4Fa42J0OwaBXM8UFxfnoosuygUXXJAGDXzEnPrLhS4A6o8OHTpk9uzZ2WeffQo9BdjJKah65s4778x//Md/5LDDDsvixYsLPQdqjQtdsLMoLy/PFVdckYMPPjjt2rVLy5Ytq/xAffDd7343P/vZz+J9G3YWFRUVXu/bKYFczxx//PH57//+7+y3337p06dPfv7znxd6EtSKIUOG5P777y/0DKh148aNy5VXXpmTTz45a9asyejRo/P5z38+DRo0yNixYws9D2rEX/7yl9x6663Za6+9MmjQoHz+85+v8gP1xa9+9av06tUrTZo0qbymxC233FLoWbyDU6zrsTvuuCNf/vKX06xZsy2uWL169eoCrYKtd/XVV1f+9fr1613ogp3CXnvtlauvvjoDBw5MSUlJ5s2bV3nfnDlzMnXq1EJPhG02dOjQD3x8ypQpdbQEas+VV16ZH/3oRxkxYkQOP/zwJG/94dA111yTH//4xxk1alSBF5II5Hpr7ty5OeOMM5Ik5513Xho2bFjl8TPPPLMQs2CbfNDFLd7JhS6oT5o1a5aFCxemc+fOad++ff7zP/8zffv2zXPPPZc+ffpkzZo1hZ4IwEfQrVu3jBs3rvJ/o7/t5ptvztixY/P8888XaBnv1PDDD2FHsmnTplx00UW54oorMnz48IwfPz6NGzcu9CyoEf7Fwc6oY8eOefnll9O5c+fstddeuf/++9O3b9/MnTs3xcXFhZ4HNWbTpk2ZPXt2li5dmlNPPTUlJSV56aWX0rx58+y6666Fngfb7OWXX85hhx22xf2HHXZYXn755QIs4r0I5Hqmb9++WbduXWbMmJF+/fq95zHl5eVbnHINO7K3T4R59/dmQn1w0kknZebMmTnkkEMycuTInH766bnhhhuybNkyp+NRb7z44os57rjjsmzZspSVleWYY45JSUlJLr/88pSVleW6664r9ETYZnvvvXd++9vf5vvf/36V+2+77bZ07969QKt4N6dY1zNf//rXc9VVV6WkpGSLxxYtWpTJkyfnlltu8adU1As33HBDrrrqqsortnfv3j3nnntuvv71rxd4GdSeRx99NI8++mi6d++eQYMGFXoO1IjBgwenpKQkN9xwQ1q1apX58+dnzz33zOzZs3PWWWf5Zg7qhd/97nc5+eSTc/TRR1d+Bvnhhx/OzJkz89vf/jYnnXRSgReSCOR6b8OGDbntttty44035tFHH81BBx2UL3zhC/m3f/u3Qk+DbXLhhRfmyiuvzMiRI3PooYcmeSscfvGLX2TUqFG5+OKLC7wQgI+qVatWeeSRR7LvvvumpKSkMpBfeOGF9OzZMxs2bCj0RKgRjz/+eK666qosXLgwSdKjR49897vfTZ8+fQq8jLcJ5Hpqzpw5mTx5cm6//fZ07tw5CxcuzAMPPJAjjjii0NOgRrRp0yZXX311TjnllCr3/+Y3v8nIkSNTWlpaoGVQ82655ZZcd911ef755/Poo4+mS5cumThxYrp165YTTzyx0PNgm7Vo0SIPP/xwevbsWSWQ//KXv+QLX/hCVq5cWeiJwE7C9yDXMz/96U/ziU98Il/84hfTokWLPPTQQ1mwYEGKiorSqlWrQs+DGvPmm2/moIMO2uL+Aw88MJs2bSrAIqgd1157bUaPHp3jjz8+r7/+esrLy5Mku+++eyZOnFjYcVBDjj322Cqv56Kioqxbty4XXXRRjj/++MINgxq0yy67ZNWqVVvc/+qrr7o+0HbEO8j1TMOGDXP++efn4osvrvIftEaNGmX+/Pnp2bNnAddBzRk5cmQaNWqUK6+8ssr95513XjZu3JhrrrmmQMugZvXs2TPjx4+v/Izm2++sPf300+nXr5+zJagXVqxYkf79+6eioiKLFy/OQQcdlMWLF6d169Z56KGHssceexR6ImyzBg0a5JVXXtni9fzSSy9lr732ysaNGwu0jHdyFet65pJLLsmUKVNyyy235JRTTslXvvKV7L///oWeBbXihhtuyP33359Pf/rTSZK//vWvWbZsWc4444yMHj268rh3RzTsSJ5//vn3/GxacXFx1q9fX4BFUPM6duyY+fPnZ9q0aXnqqaeybt26DBs2LKeddlqaNGlS6HmwTa6++uokb50ZMXny5CpfW1ZeXp6HHnoo++23X6Hm8S4CuZ4ZM2ZMxowZkwcffDA33nhjDjnkkOy9996pqKjIa6+9Vuh5UGOefvrp9O3bN0mydOnSJEnr1q3TunXrPP3005XH+eondnTdunXLvHnz0qVLlyr3T58+PT169CjQKqh5DRs2zOmnn17oGVDjrrrqqiRvfS3lddddV+Usz4997GPp2rWrrzLbjjjFup574403MnXq1Nx44415/PHHc/DBB+f444/PD3/4w0JPA+AjmDx5csaOHZuf/vSnGTZsWCZPnpylS5dmwoQJmTx5cr785S8XeiLUiKVLl2bixImVV/f9xCc+kXPOOSd77bVXgZdBzTjyyCPz+9//Pi1atCj0FD6AQK5nrrrqqowaNeo9H1uwYEEmTpyYu+66K6+++modL4OaNWXKlHz5y1926h07hVtvvTVjx46tPFuiQ4cOGTduXIYNG1bgZVAzZsyYkRNOOCEHHHBAle+HnT9/fu69994cc8wxBV4INa+8vDwLFixIly5dRPN2RCDXM02aNMkvf/nLnHHGGVs8tn79+hx77LFZuXJllixZUoB1UHPatm2bjRs3ZsiQIRk2bFgOO+ywQk+CGrdp06ZMnTo1/fv3T9u2bbNhw4asW7fOBYuod/r06ZP+/fvnsssuq3L/BRdckPvvvz9PPPFEgZZBzTn33HPTq1evDBs2LOXl5fmXf/mXPProo2natGn+8Ic/pF+/foWeSHzNU71zyy235Jvf/GbuueeeKvevW7cu/fv3T2lpaf785z8XaB3UnP/5n//JzTffnNLS0vTr1y/77bdfLr/88rzyyiuFngY1pmHDhjn77LPzj3/8I0nStGlTcUy9tHDhwvc8I+JrX/ta/va3vxVgEdS822+/PZ/85CeTJPfee29eeOGFPPPMMxk1alR+8IMfFHgdbxPI9cwXv/jF/PznP88pp5yS2bNnJ3nrneMBAwZk5cqVmTVrVtq3b1/YkVADGjZsmJNOOil33313li9fnrPOOiu33nprOnfunBNOOCF33313Nm/eXOiZsM0OPvjgPPnkk4WeAbWqTZs2mTdv3hb3z5s3zx8KUW+8+uqradeuXZLkvvvuy5AhQ7LPPvvka1/7WhYsWFDgdbzNVazroa9//etZvXp1TjzxxNx999258MIL89JLL+XBBx/Mxz/+8ULPgxrXtm3bfOYzn8miRYuyaNGiLFiwIGeeeWZatGiRKVOmOGWJHdq3v/3tfPe7382KFSty4IEHplmzZlUe7927d4GWQc0566yz8o1vfCPPPfdc5UdmHn744Vx++eVVvrYP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Bxd6KnEVawAAgFrzve99L7169cpDDz2Ufv365XOf+1wGDhyYNWvW5LXXXss3v/nNXHbZZYWeyf/yDjIAAEAtad26dWbNmpXevXtn3bp1ad68eebOnZsDDzwwSfLMM8/k05/+dF5//fXCDiWJd5ABAABqzerVq9OuXbskb30OuVmzZmnRokXl4y1atMgbb7xRqHm8i0AGAACoRUVFRR94m+2Hq1gDAADUoq9+9aspLi5OkvzjH//I2WefnWbNmiVJysrKCjmNd/EZZAAAgFoydOjQj3TclClTankJH4VABgAAgPgMMgAAACQRyAAAAJBEIAMAAEASgQwAAABJBDIA7DSKiopy1113FXoGAGy3BDIAAABEIANArZs+fXo+85nPZPfdd0+rVq3yuc99LkuXLq18/JFHHskBBxyQxo0b56CDDspdd92VoqKizJs3r/KYp59+OgMGDMiuu+6atm3b5itf+UpKS0srH+/Xr1/OOeecfO9730vLli3Trl27jB07tvLxrl27JklOOumkFBUVVd4GAP6PQAaAWrZ+/fqMHj06jz32WGbOnJkGDRrkpJNOyubNm7N27doMGjQovXr1yhNPPJFLLrkk559/fpXff/3113PUUUelT58+eeyxxzJ9+vSsXLkyX/rSl6ocd/PNN6dZs2b561//mn//93/PxRdfnD/+8Y9Jkrlz5yZJpkyZkpdffrnyNgDwf4oqKioqCj0CAHYmpaWladOmTRYsWJC//OUv+eEPf5gVK1akcePGSZLJkyfnrLPOypNPPpkDDjggP/7xj/PnP/85M2bMqPx7rFixIp06dcqzzz6bffbZJ/369Ut5eXn+/Oc/Vx5z8MEH56ijjspll12W5K3PIN95550ZPHhwnf7zAsCOwjvIAFDLFi9enFNOOSV77rlnmjdvXnl687Jly/Lss8+md+/elXGcvBW27zR//vw88MAD2XXXXSt/9ttvvySpcqp27969q/xe+/bts2rVqlr6pwKA+qdhoQcAQH03aNCgdOnSJZMmTUqHDh2yefPm7L///vnnP//5kX5/3bp1GTRoUC6//PItHmvfvn3lXzdq1KjKY0VFRdm8efO2jQeAnYhABoBa9Oqrr+bZZ5/NpEmTcsQRRyRJ/vKXv1Q+vu++++bXv/51ysrKUlxcnCRbfD64b9+++d3vfpeuXbumYcOt/1d3o0aNUl5evtW/DwD1nVOsAaAWtWjRIq1atcr111+fJUuWZNasWRk9enTl46eeemo2b96cb3zjG1m4cGFmzJiRK664Islb7wAnyfDhw7N69eqccsopmTt3bpYuXZoZM2Zk6NCh1Qrerl27ZubMmXnllVfy2muv1ew/KADUAwIZAGpRgwYNMm3atDz++OPZf//9M2rUqPzkJz+pfLx58+a59957M2/evBxwwAH5wQ9+kAsvvDBJKj+X3KFDhzz88MMpLy/Psccem169euXcc8/N7rvvngYNPvq/yn/605/mj3/8Yzp16pQ+ffrU7D8oANQDrmINANuZW2+9NUOHDs2aNWvSpEmTQs8BgJ2GzyADQIH96le/yp577pmPf/zjmT9/fs4///x86UtfEscAUMcEMgAU2CuvvJILL7wwr7zyStq3b58hQ4bk0ksvLfQsANjpOMUaAAAA4iJdAAAAkEQgAwAAQBKBDAAAAEkEMgAAACQRyAAAAJBEIAMAAEASgQwAAABJBDIAAAAkEcgAAACQJPn/Z9XQ0Rg3k6kAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#what agents did the player use to get out of his lowest rank?\n",
    "#coutning the instances of agent use\n",
    "agent_counts = silver_data['agent'].value_counts()\n",
    "\n",
    "#print the results\n",
    "print(\"Most Played Agents in silver Rank:\")\n",
    "print(agent_counts)\n",
    "\n",
    "# plotting the results using a bar plot\n",
    "plt.figure(figsize=(12, 6))\n",
    "agent_counts.plot(kind='bar', color='pink', edgecolor='black')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "937165b9",
   "metadata": {
    "papermill": {
     "duration": 0.01457,
     "end_time": "2025-01-02T18:00:03.171823",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.157253",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "the player used KAY/O to climb out of Silver rank. While he did not use KAy/O for the majority of his games, he used that agent the most. The player also climbed out of Silver in 17 games. His win rate in Silver will be observed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "38b2d630",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:03.204536Z",
     "iopub.status.busy": "2025-01-02T18:00:03.204142Z",
     "iopub.status.idle": "2025-01-02T18:00:03.211962Z",
     "shell.execute_reply": "2025-01-02T18:00:03.210731Z"
    },
    "papermill": {
     "duration": 0.025914,
     "end_time": "2025-01-02T18:00:03.213813",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.187899",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Wins in Ascendant Rank: 116\n",
      "Total Losses in Ascendant Rank: 117\n"
     ]
    }
   ],
   "source": [
    "#what is the players win rate in his highest rank?\n",
    "outcomes = ascendant_data['outcome'].value_counts()\n",
    "\n",
    "# extracting the number of wins and losses\n",
    "total_wins = outcomes.get('Win', 0)  # Default to 0 if 'Win' is not found\n",
    "total_losses = outcomes.get('Loss', 0)  # Default to 0 if 'Loss' is not found\n",
    "\n",
    "# printing the results\n",
    "print(f\"Total Wins in Ascendant Rank: {total_wins}\")\n",
    "print(f\"Total Losses in Ascendant Rank: {total_losses}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c0ba9cab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:03.244881Z",
     "iopub.status.busy": "2025-01-02T18:00:03.244459Z",
     "iopub.status.idle": "2025-01-02T18:00:03.250254Z",
     "shell.execute_reply": "2025-01-02T18:00:03.248868Z"
    },
    "papermill": {
     "duration": 0.023389,
     "end_time": "2025-01-02T18:00:03.252205",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.228816",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Win Rate in Ascendant Rank: 0.50\n"
     ]
    }
   ],
   "source": [
    "#calculating win rate based on output above\n",
    "wins = 116\n",
    "losses = 117\n",
    "\n",
    "#defining total games variable\n",
    "total_games = wins + losses\n",
    "\n",
    "#finding win rate via division\n",
    "win_rate = wins / total_games\n",
    "print(f\"Total Win Rate in Ascendant Rank: {win_rate:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f86ec75f",
   "metadata": {
    "papermill": {
     "duration": 0.014075,
     "end_time": "2025-01-02T18:00:03.280778",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.266703",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The player has a 50% win rate in Ascendant rank, meaning he is hardstuck Ascendant. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0b018bae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:03.311511Z",
     "iopub.status.busy": "2025-01-02T18:00:03.311102Z",
     "iopub.status.idle": "2025-01-02T18:00:03.318423Z",
     "shell.execute_reply": "2025-01-02T18:00:03.317099Z"
    },
    "papermill": {
     "duration": 0.025851,
     "end_time": "2025-01-02T18:00:03.321467",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.295616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Wins in Silver Rank: 7\n",
      "Total Losses in Silver Rank: 10\n"
     ]
    }
   ],
   "source": [
    "#what is the players win rate in his lowest rank?\n",
    "outcomes = silver_data['outcome'].value_counts()\n",
    "\n",
    "# extracting the number of wins and losses\n",
    "total_wins = outcomes.get('Win', 0)  # Default to 0 if 'Win' is not found\n",
    "total_losses = outcomes.get('Loss', 0)  # Default to 0 if 'Loss' is not found\n",
    "\n",
    "# print the results\n",
    "print(f\"Total Wins in Silver Rank: {total_wins}\")\n",
    "print(f\"Total Losses in Silver Rank: {total_losses}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "18a7294e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:03.353308Z",
     "iopub.status.busy": "2025-01-02T18:00:03.352880Z",
     "iopub.status.idle": "2025-01-02T18:00:03.359044Z",
     "shell.execute_reply": "2025-01-02T18:00:03.357520Z"
    },
    "papermill": {
     "duration": 0.023989,
     "end_time": "2025-01-02T18:00:03.360851",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.336862",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Win Rate in Silver Rank: 0.41\n"
     ]
    }
   ],
   "source": [
    "#calculating win rate based on output above\n",
    "#defining wins and losses\n",
    "wins = 7\n",
    "losses = 10\n",
    "\n",
    "#creating a total games variable\n",
    "total_games = wins + losses\n",
    "\n",
    "#finding win rate via division\n",
    "win_rate = wins / total_games\n",
    "print(f\"Total Win Rate in Silver Rank: {win_rate:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63527ca6",
   "metadata": {
    "papermill": {
     "duration": 0.01473,
     "end_time": "2025-01-02T18:00:03.390344",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.375614",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The player has a 41% win rate in Silver, meaning it took him Seven wins to get out of that rank. It may be that he climbed out of silver because he got those wins consecutively despite having lost more games than he won in this rank. Also, in Silver, though it is his lowest rank, his win rate is worse than it is in his highest rank (Ascendant)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e0d3ba9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:03.420616Z",
     "iopub.status.busy": "2025-01-02T18:00:03.420275Z",
     "iopub.status.idle": "2025-01-02T18:00:03.449236Z",
     "shell.execute_reply": "2025-01-02T18:00:03.447926Z"
    },
    "papermill": {
     "duration": 0.046533,
     "end_time": "2025-01-02T18:00:03.451166",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.404633",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>game_id</th>\n",
       "      <th>episode</th>\n",
       "      <th>act</th>\n",
       "      <th>rank</th>\n",
       "      <th>date</th>\n",
       "      <th>agent</th>\n",
       "      <th>map</th>\n",
       "      <th>outcome</th>\n",
       "      <th>round_wins</th>\n",
       "      <th>round_losses</th>\n",
       "      <th>...</th>\n",
       "      <th>deaths</th>\n",
       "      <th>assists</th>\n",
       "      <th>kdr</th>\n",
       "      <th>avg_dmg_delta</th>\n",
       "      <th>headshot_pct</th>\n",
       "      <th>avg_dmg</th>\n",
       "      <th>acs</th>\n",
       "      <th>num_frag</th>\n",
       "      <th>outcome_binary</th>\n",
       "      <th>rank_numeric</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>Placement</td>\n",
       "      <td>4/11/2023</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Ascent</td>\n",
       "      <td>Loss</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>-61</td>\n",
       "      <td>3</td>\n",
       "      <td>76</td>\n",
       "      <td>125</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>Placement</td>\n",
       "      <td>4/12/2023</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Icebox</td>\n",
       "      <td>Loss</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>0.2</td>\n",
       "      <td>-124</td>\n",
       "      <td>22</td>\n",
       "      <td>42</td>\n",
       "      <td>59</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>Placement</td>\n",
       "      <td>4/15/2023</td>\n",
       "      <td>KAY/O</td>\n",
       "      <td>Lotus</td>\n",
       "      <td>Win</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>0.6</td>\n",
       "      <td>-46</td>\n",
       "      <td>2</td>\n",
       "      <td>87</td>\n",
       "      <td>132</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>Placement</td>\n",
       "      <td>4/15/2023</td>\n",
       "      <td>Brimstone</td>\n",
       "      <td>Ascent</td>\n",
       "      <td>Loss</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>1.5</td>\n",
       "      <td>23</td>\n",
       "      <td>14</td>\n",
       "      <td>137</td>\n",
       "      <td>230</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>Placement</td>\n",
       "      <td>4/15/2023</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Haven</td>\n",
       "      <td>Loss</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>0.4</td>\n",
       "      <td>-75</td>\n",
       "      <td>7</td>\n",
       "      <td>90</td>\n",
       "      <td>146</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>223</th>\n",
       "      <td>224</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>Placement</td>\n",
       "      <td>6/26/2023</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Bind</td>\n",
       "      <td>Win</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>8</td>\n",
       "      <td>0.9</td>\n",
       "      <td>-8</td>\n",
       "      <td>15</td>\n",
       "      <td>103</td>\n",
       "      <td>172</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224</th>\n",
       "      <td>225</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>6/27/2023</td>\n",
       "      <td>Killjoy</td>\n",
       "      <td>Fracture</td>\n",
       "      <td>Loss</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>16</td>\n",
       "      <td>3</td>\n",
       "      <td>1.1</td>\n",
       "      <td>-22</td>\n",
       "      <td>8</td>\n",
       "      <td>113</td>\n",
       "      <td>180</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>225</th>\n",
       "      <td>226</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>6/27/2023</td>\n",
       "      <td>Killjoy</td>\n",
       "      <td>Ascent</td>\n",
       "      <td>Loss</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>0.9</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>129</td>\n",
       "      <td>192</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>226</th>\n",
       "      <td>227</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>6/30/2023</td>\n",
       "      <td>Killjoy</td>\n",
       "      <td>Haven</td>\n",
       "      <td>Win</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>1.3</td>\n",
       "      <td>24</td>\n",
       "      <td>30</td>\n",
       "      <td>165</td>\n",
       "      <td>256</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>385</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>8/28/2023</td>\n",
       "      <td>Killjoy</td>\n",
       "      <td>Split</td>\n",
       "      <td>Loss</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>18</td>\n",
       "      <td>10</td>\n",
       "      <td>1.1</td>\n",
       "      <td>41</td>\n",
       "      <td>18</td>\n",
       "      <td>171</td>\n",
       "      <td>269</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>432</th>\n",
       "      <td>433</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>Placement</td>\n",
       "      <td>10/28/2023</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Lotus</td>\n",
       "      <td>Loss</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "      <td>1.2</td>\n",
       "      <td>-2</td>\n",
       "      <td>23</td>\n",
       "      <td>136</td>\n",
       "      <td>226</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>533</th>\n",
       "      <td>534</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>Placement</td>\n",
       "      <td>1/7/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Bind</td>\n",
       "      <td>Loss</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>22</td>\n",
       "      <td>3</td>\n",
       "      <td>0.4</td>\n",
       "      <td>-98</td>\n",
       "      <td>20</td>\n",
       "      <td>58</td>\n",
       "      <td>96</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>534</th>\n",
       "      <td>535</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>1/12/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Icebox</td>\n",
       "      <td>Loss</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>1.3</td>\n",
       "      <td>-3</td>\n",
       "      <td>16</td>\n",
       "      <td>121</td>\n",
       "      <td>222</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>535</th>\n",
       "      <td>536</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>1/13/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Lotus</td>\n",
       "      <td>Loss</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>-26</td>\n",
       "      <td>33</td>\n",
       "      <td>110</td>\n",
       "      <td>167</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>536</th>\n",
       "      <td>537</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>1/13/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Split</td>\n",
       "      <td>Loss</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>18</td>\n",
       "      <td>8</td>\n",
       "      <td>0.9</td>\n",
       "      <td>9</td>\n",
       "      <td>17</td>\n",
       "      <td>139</td>\n",
       "      <td>211</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>537</th>\n",
       "      <td>538</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>1/15/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Sunset</td>\n",
       "      <td>Loss</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>8</td>\n",
       "      <td>0.6</td>\n",
       "      <td>-28</td>\n",
       "      <td>29</td>\n",
       "      <td>108</td>\n",
       "      <td>168</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>606</th>\n",
       "      <td>607</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>3/3/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Ascent</td>\n",
       "      <td>Win</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>13</td>\n",
       "      <td>1.1</td>\n",
       "      <td>36</td>\n",
       "      <td>30</td>\n",
       "      <td>150</td>\n",
       "      <td>212</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>742</th>\n",
       "      <td>743</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>6/26/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Abyss</td>\n",
       "      <td>Win</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>1.1</td>\n",
       "      <td>22</td>\n",
       "      <td>29</td>\n",
       "      <td>99</td>\n",
       "      <td>147</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>743</th>\n",
       "      <td>744</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>6/26/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Lotus</td>\n",
       "      <td>Loss</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>1.5</td>\n",
       "      <td>54</td>\n",
       "      <td>35</td>\n",
       "      <td>169</td>\n",
       "      <td>280</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>744</th>\n",
       "      <td>745</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>6/26/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Haven</td>\n",
       "      <td>Win</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>21</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1</td>\n",
       "      <td>35</td>\n",
       "      <td>144</td>\n",
       "      <td>218</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>745</th>\n",
       "      <td>746</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>6/26/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Abyss</td>\n",
       "      <td>Win</td>\n",
       "      <td>13</td>\n",
       "      <td>9</td>\n",
       "      <td>...</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>1.2</td>\n",
       "      <td>-3</td>\n",
       "      <td>32</td>\n",
       "      <td>116</td>\n",
       "      <td>190</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>746</th>\n",
       "      <td>747</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>Placement</td>\n",
       "      <td>6/26/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Bind</td>\n",
       "      <td>Loss</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>0.9</td>\n",
       "      <td>-11</td>\n",
       "      <td>24</td>\n",
       "      <td>133</td>\n",
       "      <td>206</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>853</th>\n",
       "      <td>854</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Placement</td>\n",
       "      <td>8/31/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Bind</td>\n",
       "      <td>Loss</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>16</td>\n",
       "      <td>3</td>\n",
       "      <td>1.4</td>\n",
       "      <td>59</td>\n",
       "      <td>28</td>\n",
       "      <td>186</td>\n",
       "      <td>289</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>958</th>\n",
       "      <td>959</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Placement</td>\n",
       "      <td>10/23/2024</td>\n",
       "      <td>Cypher</td>\n",
       "      <td>Pearl</td>\n",
       "      <td>Loss</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>16</td>\n",
       "      <td>3</td>\n",
       "      <td>1.6</td>\n",
       "      <td>74</td>\n",
       "      <td>60</td>\n",
       "      <td>190</td>\n",
       "      <td>267</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>24 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     game_id  episode  act       rank        date      agent       map  \\\n",
       "0          1        6    2  Placement   4/11/2023     Cypher    Ascent   \n",
       "1          2        6    2  Placement   4/12/2023     Cypher    Icebox   \n",
       "2          3        6    2  Placement   4/15/2023      KAY/O     Lotus   \n",
       "3          4        6    2  Placement   4/15/2023  Brimstone    Ascent   \n",
       "4          5        6    2  Placement   4/15/2023     Cypher     Haven   \n",
       "223      224        6    3  Placement   6/26/2023     Cypher      Bind   \n",
       "224      225        7    1  Placement   6/27/2023    Killjoy  Fracture   \n",
       "225      226        7    1  Placement   6/27/2023    Killjoy    Ascent   \n",
       "226      227        7    1  Placement   6/30/2023    Killjoy     Haven   \n",
       "384      385        7    1  Placement   8/28/2023    Killjoy     Split   \n",
       "432      433        7    2  Placement  10/28/2023     Cypher     Lotus   \n",
       "533      534        7    3  Placement    1/7/2024     Cypher      Bind   \n",
       "534      535        8    1  Placement   1/12/2024     Cypher    Icebox   \n",
       "535      536        8    1  Placement   1/13/2024     Cypher     Lotus   \n",
       "536      537        8    1  Placement   1/13/2024     Cypher     Split   \n",
       "537      538        8    1  Placement   1/15/2024     Cypher    Sunset   \n",
       "606      607        8    1  Placement    3/3/2024     Cypher    Ascent   \n",
       "742      743        9    1  Placement   6/26/2024     Cypher     Abyss   \n",
       "743      744        9    1  Placement   6/26/2024     Cypher     Lotus   \n",
       "744      745        9    1  Placement   6/26/2024     Cypher     Haven   \n",
       "745      746        9    1  Placement   6/26/2024     Cypher     Abyss   \n",
       "746      747        9    1  Placement   6/26/2024     Cypher      Bind   \n",
       "853      854        9    2  Placement   8/31/2024     Cypher      Bind   \n",
       "958      959        9    3  Placement  10/23/2024     Cypher     Pearl   \n",
       "\n",
       "    outcome  round_wins  round_losses  ...  deaths  assists  kdr  \\\n",
       "0      Loss           5            13  ...      15        4  0.5   \n",
       "1      Loss           4            13  ...      15        2  0.2   \n",
       "2       Win          13             4  ...      12        7  0.6   \n",
       "3      Loss           9            13  ...      12       10  1.5   \n",
       "4      Loss           1            13  ...      14        3  0.4   \n",
       "223     Win          13            11  ...      15        8  0.9   \n",
       "224    Loss          11            13  ...      16        3  1.1   \n",
       "225    Loss          10            13  ...      18        5  0.9   \n",
       "226     Win          13            11  ...      16        5  1.3   \n",
       "384    Loss           9            13  ...      18       10  1.1   \n",
       "432    Loss          13            15  ...      20        2  1.2   \n",
       "533    Loss          12            14  ...      22        3  0.4   \n",
       "534    Loss           5            13  ...      12        4  1.3   \n",
       "535    Loss           5            13  ...      14        1  0.9   \n",
       "536    Loss          11            13  ...      18        8  0.9   \n",
       "537    Loss           9            13  ...      17        8  0.6   \n",
       "606     Win          13            10  ...      15       13  1.1   \n",
       "742     Win          13             5  ...       8        5  1.1   \n",
       "743    Loss          10            13  ...      15       10  1.5   \n",
       "744     Win          14            12  ...      21        9  1.0   \n",
       "745     Win          13             9  ...      13        3  1.2   \n",
       "746    Loss           9            13  ...      18        5  0.9   \n",
       "853    Loss          11            13  ...      16        3  1.4   \n",
       "958    Loss          11            13  ...      16        3  1.6   \n",
       "\n",
       "     avg_dmg_delta  headshot_pct  avg_dmg  acs  num_frag  outcome_binary  \\\n",
       "0              -61             3       76  125         3             0.0   \n",
       "1             -124            22       42   59         5             0.0   \n",
       "2              -46             2       87  132         5             1.0   \n",
       "3               23            14      137  230         2             0.0   \n",
       "4              -75             7       90  146         4             0.0   \n",
       "223             -8            15      103  172         4             1.0   \n",
       "224            -22             8      113  180         2             0.0   \n",
       "225              5            16      129  192         4             0.0   \n",
       "226             24            30      165  256         2             1.0   \n",
       "384             41            18      171  269         2             0.0   \n",
       "432             -2            23      136  226         1             0.0   \n",
       "533            -98            20       58   96         5             0.0   \n",
       "534             -3            16      121  222         1             0.0   \n",
       "535            -26            33      110  167         3             0.0   \n",
       "536              9            17      139  211         3             0.0   \n",
       "537            -28            29      108  168         4             0.0   \n",
       "606             36            30      150  212         4             1.0   \n",
       "742             22            29       99  147         5             1.0   \n",
       "743             54            35      169  280         1             0.0   \n",
       "744             -1            35      144  218         3             1.0   \n",
       "745             -3            32      116  190         5             1.0   \n",
       "746            -11            24      133  206         3             0.0   \n",
       "853             59            28      186  289         1             0.0   \n",
       "958             74            60      190  267         1             0.0   \n",
       "\n",
       "     rank_numeric  \n",
       "0             NaN  \n",
       "1             NaN  \n",
       "2             NaN  \n",
       "3             NaN  \n",
       "4             NaN  \n",
       "223           NaN  \n",
       "224           NaN  \n",
       "225           NaN  \n",
       "226           NaN  \n",
       "384           NaN  \n",
       "432           NaN  \n",
       "533           NaN  \n",
       "534           NaN  \n",
       "535           NaN  \n",
       "536           NaN  \n",
       "537           NaN  \n",
       "606           NaN  \n",
       "742           NaN  \n",
       "743           NaN  \n",
       "744           NaN  \n",
       "745           NaN  \n",
       "746           NaN  \n",
       "853           NaN  \n",
       "958           NaN  \n",
       "\n",
       "[24 rows x 21 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# did the player deserve Silver based on Placement matches?\n",
    "#making a df of placement matches\n",
    "placement_matches = df[df['rank'].isin(['Placement', ''])]\n",
    "placement_matches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "71adceed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:03.485477Z",
     "iopub.status.busy": "2025-01-02T18:00:03.485112Z",
     "iopub.status.idle": "2025-01-02T18:00:03.493072Z",
     "shell.execute_reply": "2025-01-02T18:00:03.491840Z"
    },
    "papermill": {
     "duration": 0.027778,
     "end_time": "2025-01-02T18:00:03.495376",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.467598",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#making datasets for the placement matches of every season (is called \"episode\" in valorant)\n",
    "episode_6 = placement_matches[placement_matches['episode'] == 6]\n",
    "episode_7 = placement_matches[placement_matches['episode'] == 7]\n",
    "episode_8 = placement_matches[placement_matches['episode'] == 8]\n",
    "episode_9 = placement_matches[placement_matches['episode'] == 9]\n",
    "\n",
    "#checking to see if datasets are empty\n",
    "# print(f\"Placement Matches in Episode 6:\\n{episode_6.head()}\")\n",
    "# print(f\"Placement Matches in Episode 7:\\n{episode_7.head()}\")\n",
    "# print(f\"Placement Matches in Episode 8:\\n{episode_8.head()}\")\n",
    "# print(f\"Placement Matches in Episode 9:\\n{episode_9.head()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b0c3aa7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:03.530232Z",
     "iopub.status.busy": "2025-01-02T18:00:03.529779Z",
     "iopub.status.idle": "2025-01-02T18:00:03.537691Z",
     "shell.execute_reply": "2025-01-02T18:00:03.536391Z"
    },
    "papermill": {
     "duration": 0.027862,
     "end_time": "2025-01-02T18:00:03.539597",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.511735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Wins in Episode 6 Placements: 2\n",
      "Total Losses in Episode 6 Placements: 4\n"
     ]
    }
   ],
   "source": [
    "#checking the first season played only, since that is where player placed in silver\n",
    "#episode 6 placements win rate\n",
    "outcomes = episode_6['outcome'].value_counts()\n",
    "\n",
    "# extracting the number of wins and losses\n",
    "total_wins = outcomes.get('Win', 0)  # Default to 0 if 'Win' is not found\n",
    "total_losses = outcomes.get('Loss', 0)  # Default to 0 if 'Loss' is not found\n",
    "\n",
    "# print the results\n",
    "print(f\"Total Wins in Episode 6 Placements: {total_wins}\")\n",
    "print(f\"Total Losses in Episode 6 Placements: {total_losses}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d1e82aa2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:03.572794Z",
     "iopub.status.busy": "2025-01-02T18:00:03.572392Z",
     "iopub.status.idle": "2025-01-02T18:00:03.578446Z",
     "shell.execute_reply": "2025-01-02T18:00:03.577074Z"
    },
    "papermill": {
     "duration": 0.025123,
     "end_time": "2025-01-02T18:00:03.580544",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.555421",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Player's Win rate in Episode 6 Placements is: 0.3333333333333333\n"
     ]
    }
   ],
   "source": [
    "#finding win rate\n",
    "#defining wins and losses\n",
    "wins = 2\n",
    "losses = 4\n",
    "\n",
    "#defining total games\n",
    "total_games = wins + losses\n",
    "\n",
    "#finding win rate via division\n",
    "win_rate = wins / total_games\n",
    "print(f\"The Player's Win rate in Episode 6 Placements is:\" , win_rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7df3875b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:03.613896Z",
     "iopub.status.busy": "2025-01-02T18:00:03.613539Z",
     "iopub.status.idle": "2025-01-02T18:00:03.619980Z",
     "shell.execute_reply": "2025-01-02T18:00:03.618150Z"
    },
    "papermill": {
     "duration": 0.025858,
     "end_time": "2025-01-02T18:00:03.622481",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.596623",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The player's average damage per game in episode 6 placements was: 89.16666666666667\n"
     ]
    }
   ],
   "source": [
    "avg_dmg = episode_6['avg_dmg'].mean()\n",
    "print(f\"The player's average damage per game in episode 6 placements was:\" , avg_dmg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e07d6c17",
   "metadata": {
    "papermill": {
     "duration": 0.015563,
     "end_time": "2025-01-02T18:00:03.655626",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.640063",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The players win rate in his in placements in episode 6 was 33%, with an average damage of 89. Both statistics are relatively low, considering that 89 damage is barely enough to kill a single agent in Valorant. Given that this is the players first episode in Valorant, it is safe to say based on these statistics that the player did deserve Silver ranking to start."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "0adecdd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:03.689099Z",
     "iopub.status.busy": "2025-01-02T18:00:03.688685Z",
     "iopub.status.idle": "2025-01-02T18:00:03.695499Z",
     "shell.execute_reply": "2025-01-02T18:00:03.694051Z"
    },
    "papermill": {
     "duration": 0.026115,
     "end_time": "2025-01-02T18:00:03.697450",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.671335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation between damage and outcome: 0.14\n"
     ]
    }
   ],
   "source": [
    "#is there a correlation between damage and outcome in player's episode 6 placement matches?\n",
    "#finding the correlation coefficient\n",
    "correlation = episode_6['avg_dmg'].corr(episode_6['outcome_binary'])\n",
    "print(f\"Correlation between damage and outcome: {correlation:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdf279e7",
   "metadata": {
    "papermill": {
     "duration": 0.015374,
     "end_time": "2025-01-02T18:00:03.729248",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.713874",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "A correlation of 0.14 between headshot percentage and outcome suggests a very weak positive relationship, meaning that while there is a slight tendency for higher headshot percentages to be associated with winning, the relationship is too weak to be of practical importance. This weak correlation implies that other factors are likely more influential in determining match outcomes."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69a515ba",
   "metadata": {
    "papermill": {
     "duration": 0.016582,
     "end_time": "2025-01-02T18:00:03.761708",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.745126",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Stats Test**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "fa2208e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:03.799591Z",
     "iopub.status.busy": "2025-01-02T18:00:03.798638Z",
     "iopub.status.idle": "2025-01-02T18:00:03.811747Z",
     "shell.execute_reply": "2025-01-02T18:00:03.810351Z"
    },
    "papermill": {
     "duration": 0.035539,
     "end_time": "2025-01-02T18:00:03.813946",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.778407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a significant difference in average damage and wins.\n"
     ]
    }
   ],
   "source": [
    "t_stat, p_value = stats.ttest_ind(episode_6['avg_dmg'], episode_6['outcome_binary'])\n",
    "\n",
    "# rejecting or accepting the null hypothesis\n",
    "if p_value < 0.05:\n",
    "    print(\"There is a significant difference in average damage and wins.\")\n",
    "else:\n",
    "    print(\"There is no significant difference in average damage and wins.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4e72a01",
   "metadata": {
    "papermill": {
     "duration": 0.015364,
     "end_time": "2025-01-02T18:00:03.845566",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.830202",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Through a two-tailed stats test, we now know that we can accept the hypothesis that there is a difference between average damage and wins, meaning that average damage alone is not the way to predict wins. We can add this to our features in machine learning however it cannot be the sole feature."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8748e958",
   "metadata": {
    "papermill": {
     "duration": 0.015402,
     "end_time": "2025-01-02T18:00:03.876608",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.861206",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Machine Learning**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5642badf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:03.909644Z",
     "iopub.status.busy": "2025-01-02T18:00:03.909278Z",
     "iopub.status.idle": "2025-01-02T18:00:04.659460Z",
     "shell.execute_reply": "2025-01-02T18:00:04.658289Z"
    },
    "papermill": {
     "duration": 0.769142,
     "end_time": "2025-01-02T18:00:04.661395",
     "exception": false,
     "start_time": "2025-01-02T18:00:03.892253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9850\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "        Draw       1.00      0.00      0.00         3\n",
      "        Loss       0.97      1.00      0.99        99\n",
      "         Win       1.00      1.00      1.00        98\n",
      "\n",
      "    accuracy                           0.98       200\n",
      "   macro avg       0.99      0.67      0.66       200\n",
      "weighted avg       0.99      0.98      0.98       200\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.impute import SimpleImputer\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# # making sure the 'outcome' column is kept in the final dataset\n",
    "df_encoded = pd.get_dummies(df.drop(columns=['outcome']), drop_first=True)  # One-Hot Encoding for categorical columns\n",
    "df_encoded['outcome'] = df['outcome']  # Add 'outcome' column back\n",
    "\n",
    "# # separate features and target\n",
    "X = df_encoded.drop(columns=['outcome'])  # Features (independent variables)\n",
    "y = df_encoded['outcome']  # Target variable (dependent)\n",
    "\n",
    "# # splitting data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# # # handling missing values\n",
    "imputer = SimpleImputer(strategy='mean')  # Using 'mean' to fill NaN values\n",
    "X_train_imputed = imputer.fit_transform(X_train)\n",
    "X_test_imputed = imputer.transform(X_test)\n",
    "\n",
    "# # applying StandardScaler to numerical columns only\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train_imputed)\n",
    "X_test_scaled = scaler.transform(X_test_imputed)\n",
    "\n",
    "# # training a Logistic Regression model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "model = LogisticRegression(class_weight='balanced', C=0.1, penalty='l1', solver='liblinear', max_iter=1000)\n",
    "model.fit(X_train_scaled, y_train)\n",
    "\n",
    "# # predicting and evaluating the model\n",
    "from sklearn.metrics import classification_report\n",
    "y_pred = model.predict(X_test_scaled)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"Accuracy: {accuracy:.4f}\")\n",
    "print(classification_report(y_test, y_pred , zero_division = 1))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f9b2ff92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-02T18:00:04.695580Z",
     "iopub.status.busy": "2025-01-02T18:00:04.695075Z",
     "iopub.status.idle": "2025-01-02T18:00:04.702404Z",
     "shell.execute_reply": "2025-01-02T18:00:04.701238Z"
    },
    "papermill": {
     "duration": 0.026633,
     "end_time": "2025-01-02T18:00:04.704169",
     "exception": false,
     "start_time": "2025-01-02T18:00:04.677536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix:\n",
      "[[ 0  3  0]\n",
      " [ 0 99  0]\n",
      " [ 0  0 98]]\n"
     ]
    }
   ],
   "source": [
    "# evaluating the model\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# printing evaluation results\n",
    "print(\"Confusion Matrix:\")\n",
    "print(conf_matrix)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cb4e12b",
   "metadata": {
    "papermill": {
     "duration": 0.015391,
     "end_time": "2025-01-02T18:00:04.735974",
     "exception": false,
     "start_time": "2025-01-02T18:00:04.720583",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Here we have created a model that is 99% accurate at predicting the outcome of a match based on KDR, damage, headshot percentage, agent, and map. It is able to predict wins 100% of the time and able to predict losses 97% of the time. It does not accurately predict Draws at all because of the low frequency of draws within the dataset. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70adb89d",
   "metadata": {
    "papermill": {
     "duration": 0.015356,
     "end_time": "2025-01-02T18:00:04.767116",
     "exception": false,
     "start_time": "2025-01-02T18:00:04.751760",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Through EDA we discovered that the player's best map was Ascent, with a 15.5% win rate across all maps in the game. His best agent by far is Cypher with a 51% win rate overall, hwoever he used Kay/O to climb out of Silver, which was his lowest rank. His highest rank, where he collected the most wins with Cypher, was Ascendant 2. Due to his highest rank being Ascendant 2, the model can only predict outcomes of games up to that, which is one of the limitations the data provided. The other limitation is predicting Draws, because of the low frequency of draws within the data. there are 24 rounds within a single game of Valorant and the first team to win 13 rounds wins, so the probability of getting a draw is relatively low, so low that draws do not affect predictions or the dataset as a whole. Statistical data analysis showed that there is a weak correlationbetween damage output and the outcome of match, meaning that the player could do a lot of damage but still lose the game showing that outcome can be affected by things that the data cannot track like team synergy and tactical strategy. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6002a289",
   "metadata": {
    "papermill": {
     "duration": 0.016218,
     "end_time": "2025-01-02T18:00:04.799381",
     "exception": false,
     "start_time": "2025-01-02T18:00:04.783163",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6086671,
     "sourceId": 9907026,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30822,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.710736,
   "end_time": "2025-01-02T18:00:05.536817",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-02T17:59:55.826081",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
